package com.ces.domain.model;

import org.junit.jupiter.api.Test;

import java.time.Instant;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for EventMessage domain entity.
 */
class EventMessageTest {

    @Test
    void shouldCreateEventMessageWithAutoGeneratedId() {
        // given
        SessionId sessionId = SessionId.generate();
        String data = "test data";
        String source = "test-topic";

        // when
        EventMessage message = new EventMessage(sessionId, data, source);

        // then
        assertNotNull(message);
        assertNotNull(message.getMessageId());
        assertEquals(sessionId, message.getTargetSessionId());
        assertEquals(data, message.getData());
        assertEquals(source, message.getSource());
        assertNotNull(message.getTimestamp());
    }

    @Test
    void shouldCreateEventMessageWithSpecificValues() {
        // given
        String messageId = "msg-123";
        SessionId sessionId = SessionId.generate();
        String data = "test data";
        String source = "test-topic";
        Instant timestamp = Instant.now();

        // when
        EventMessage message = new EventMessage(messageId, sessionId, data, source, timestamp);

        // then
        assertNotNull(message);
        assertEquals(messageId, message.getMessageId());
        assertEquals(sessionId, message.getTargetSessionId());
        assertEquals(data, message.getData());
        assertEquals(source, message.getSource());
        assertEquals(timestamp, message.getTimestamp());
    }

    @Test
    void shouldThrowExceptionWhenTargetSessionIdIsNull() {
        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(null, "data", "source")
        );
        assertEquals("Target session ID cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenDataIsNull() {
        // given
        SessionId sessionId = SessionId.generate();

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(sessionId, null, "source")
        );
        assertEquals("Message data cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenSourceIsNull() {
        // given
        SessionId sessionId = SessionId.generate();

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(sessionId, "data", null)
        );
        assertEquals("Message source cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenMessageIdIsNull() {
        // given
        SessionId sessionId = SessionId.generate();
        Instant timestamp = Instant.now();

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(null, sessionId, "data", "source", timestamp)
        );
        assertEquals("Message ID cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenTimestampIsNull() {
        // given
        SessionId sessionId = SessionId.generate();

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage("msg-123", sessionId, "data", "source", null)
        );
        assertEquals("Timestamp cannot be null", exception.getMessage());
    }

    @Test
    void shouldGenerateUniqueMessageIds() {
        // given
        SessionId sessionId = SessionId.generate();

        // when
        EventMessage message1 = new EventMessage(sessionId, "data1", "source1");
        EventMessage message2 = new EventMessage(sessionId, "data2", "source2");

        // then
        assertNotEquals(message1.getMessageId(), message2.getMessageId());
    }

    @Test
    void shouldBeEqualWhenMessageIdsAreTheSame() {
        // given
        String messageId = "msg-123";
        SessionId sessionId1 = SessionId.generate();
        SessionId sessionId2 = SessionId.generate();
        Instant timestamp = Instant.now();

        EventMessage message1 = new EventMessage(messageId, sessionId1, "data1", "source1", timestamp);
        EventMessage message2 = new EventMessage(messageId, sessionId2, "data2", "source2", timestamp);

        // when & then
        assertEquals(message1, message2);
        assertEquals(message1.hashCode(), message2.hashCode());
    }

    @Test
    void shouldNotBeEqualWhenMessageIdsAreDifferent() {
        // given
        SessionId sessionId = SessionId.generate();
        Instant timestamp = Instant.now();

        EventMessage message1 = new EventMessage("msg-1", sessionId, "data", "source", timestamp);
        EventMessage message2 = new EventMessage("msg-2", sessionId, "data", "source", timestamp);

        // when & then
        assertNotEquals(message1, message2);
    }

    @Test
    void shouldBeEqualToItself() {
        // given
        SessionId sessionId = SessionId.generate();
        EventMessage message = new EventMessage(sessionId, "data", "source");

        // when & then
        assertEquals(message, message);
    }

    @Test
    void shouldNotBeEqualToNull() {
        // given
        SessionId sessionId = SessionId.generate();
        EventMessage message = new EventMessage(sessionId, "data", "source");

        // when & then
        assertNotEquals(null, message);
    }

    @Test
    void shouldNotBeEqualToDifferentClass() {
        // given
        SessionId sessionId = SessionId.generate();
        EventMessage message = new EventMessage(sessionId, "data", "source");
        String differentClass = "not a message";

        // when & then
        assertNotEquals(message, differentClass);
    }

    @Test
    void shouldHaveValidToString() {
        // given
        SessionId sessionId = SessionId.of("test-session-123");
        EventMessage message = new EventMessage(sessionId, "test data", "kafka-topic");

        // when
        String result = message.toString();

        // then
        assertNotNull(result);
        assertTrue(result.contains("EventMessage{"));
        assertTrue(result.contains("messageId="));
        assertTrue(result.contains("targetSessionId="));
        assertTrue(result.contains("source="));
        assertTrue(result.contains("timestamp="));
        assertTrue(result.contains("kafka-topic"));
    }

    @Test
    void shouldAllowEmptyStringData() {
        // given
        SessionId sessionId = SessionId.generate();
        String emptyData = "";

        // when
        EventMessage message = new EventMessage(sessionId, emptyData, "source");

        // then
        assertNotNull(message);
        assertEquals(emptyData, message.getData());
    }

    @Test
    void shouldAllowComplexJsonData() {
        // given
        SessionId sessionId = SessionId.generate();
        String jsonData = "{\"key\": \"value\", \"nested\": {\"field\": 123}}";

        // when
        EventMessage message = new EventMessage(sessionId, jsonData, "kafka-topic");

        // then
        assertNotNull(message);
        assertEquals(jsonData, message.getData());
    }

    @Test
    void shouldPreserveAllFieldsFromConstructor() {
        // given
        String messageId = "custom-msg-id";
        SessionId sessionId = SessionId.of("session-456");
        String data = "important data";
        String source = "customer-events";
        Instant timestamp = Instant.parse("2025-10-01T18:45:00Z");

        // when
        EventMessage message = new EventMessage(messageId, sessionId, data, source, timestamp);

        // then
        assertEquals(messageId, message.getMessageId());
        assertEquals(sessionId, message.getTargetSessionId());
        assertEquals(data, message.getData());
        assertEquals(source, message.getSource());
        assertEquals(timestamp, message.getTimestamp());
    }

    @Test
    void shouldHandleLargeDataPayload() {
        // given
        SessionId sessionId = SessionId.generate();
        String largeData = "x".repeat(10000);

        // when
        EventMessage message = new EventMessage(sessionId, largeData, "source");

        // then
        assertNotNull(message);
        assertEquals(largeData, message.getData());
        assertEquals(10000, message.getData().length());
    }

    @Test
    void shouldHandleSpecialCharactersInData() {
        // given
        SessionId sessionId = SessionId.generate();
        String specialData = "Test with special chars: äöü ñ © ® € \n\t";

        // when
        EventMessage message = new EventMessage(sessionId, specialData, "source");

        // then
        assertNotNull(message);
        assertEquals(specialData, message.getData());
    }
}
