package com.ces.domain.model;

import com.google.protobuf.Timestamp;
import com.lnw.expressway.messages.v1.FeedMessageProto.FeedMessage;
import com.lnw.expressway.messages.v1.FeedMessageProto.Header;
import com.lnw.expressway.messages.v1.FeedMessageProto.LoginPayload;
import org.junit.jupiter.api.Test;

import java.time.Instant;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for EventMessage domain entity.
 */
class EventMessageTest {

    // Helper method to create test FeedMessage
    private FeedMessage createTestFeedMessage(int accountId) {
        Instant now = Instant.now();
        Timestamp timestamp = Timestamp.newBuilder()
                .setSeconds(now.getEpochSecond())
                .setNanos(now.getNano())
                .build();

        return FeedMessage.newBuilder()
                .setHeader(Header.newBuilder()
                        .setTimestamp(timestamp)
                        .setMessageType(Header.MessageType.Login)
                        .setIdentifier(Header.Identifier.newBuilder()
                                .setKey(Header.Identifier.SequencingKey.OPS_Account)
                                .setSequenceId(123456789L)
                                .setUuid("test-uuid")
                                .build())
                        .setSystemRef(Header.SystemRef.newBuilder()
                                .setProduct(Header.SystemRef.Product.OPS)
                                .setSystem(Header.SystemRef.System.Account)
                                .setTenant("test-tenant")
                                .build())
                        .build())
                .setLoginPayload(LoginPayload.newBuilder()
                        .setLoginId(2025010301300000000L)
                        .setAccountId(accountId)
                        .setLoginTime(timestamp)
                        .setLogoutTime(timestamp)
                        .setIp("192.168.1.1")
                        .setChannel("web")
                        .setIsFailedLogin(false)
                        .build())
                .build();
    }

    @Test
    void shouldCreateEventMessageWithAutoGeneratedId() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        String source = "test-topic";

        // when
        EventMessage message = new EventMessage(sessionId, feedMessage, source);

        // then
        assertNotNull(message);
        assertNotNull(message.getMessageId());
        assertEquals(sessionId, message.getTargetSessionId());
        assertNotNull(message.getData());
        assertNotNull(message.getFeedMessage());
        assertEquals(feedMessage, message.getFeedMessage());
        assertEquals(source, message.getSource());
        assertNotNull(message.getTimestamp());
    }

    @Test
    void shouldCreateEventMessageWithSpecificValues() {
        // given
        String messageId = "msg-123";
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(987654321);
        String source = "test-topic";
        Instant timestamp = Instant.now();

        // when
        EventMessage message = new EventMessage(messageId, sessionId, feedMessage, source, timestamp);

        // then
        assertNotNull(message);
        assertEquals(messageId, message.getMessageId());
        assertEquals(sessionId, message.getTargetSessionId());
        assertNotNull(message.getData());
        assertEquals(feedMessage, message.getFeedMessage());
        assertEquals(source, message.getSource());
        assertEquals(timestamp, message.getTimestamp());
    }

    @Test
    void shouldThrowExceptionWhenTargetSessionIdIsNull() {
        // given
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        
        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(null, feedMessage, "source")
        );
        assertEquals("Target session ID cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenFeedMessageIsNull() {
        // given
        SessionId sessionId = SessionId.generate();

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(sessionId, null, "source")
        );
        assertEquals("FeedMessage cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenSourceIsNull() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(sessionId, feedMessage, null)
        );
        assertEquals("Message source cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenMessageIdIsNull() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        Instant timestamp = Instant.now();

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage(null, sessionId, feedMessage, "source", timestamp)
        );
        assertEquals("Message ID cannot be null", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenTimestampIsNull() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);

        // when & then
        NullPointerException exception = assertThrows(
            NullPointerException.class,
            () -> new EventMessage("msg-123", sessionId, feedMessage, "source", null)
        );
        assertEquals("Timestamp cannot be null", exception.getMessage());
    }

    @Test
    void shouldGenerateUniqueMessageIds() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage1 = createTestFeedMessage(111111111);
        FeedMessage feedMessage2 = createTestFeedMessage(222222222);

        // when
        EventMessage message1 = new EventMessage(sessionId, feedMessage1, "source1");
        EventMessage message2 = new EventMessage(sessionId, feedMessage2, "source2");

        // then
        assertNotEquals(message1.getMessageId(), message2.getMessageId());
    }

    @Test
    void shouldBeEqualWhenMessageIdsAreTheSame() {
        // given
        String messageId = "msg-123";
        SessionId sessionId1 = SessionId.generate();
        SessionId sessionId2 = SessionId.generate();
        FeedMessage feedMessage1 = createTestFeedMessage(333333333);
        FeedMessage feedMessage2 = createTestFeedMessage(444444444);
        Instant timestamp = Instant.now();

        EventMessage message1 = new EventMessage(messageId, sessionId1, feedMessage1, "source1", timestamp);
        EventMessage message2 = new EventMessage(messageId, sessionId2, feedMessage2, "source2", timestamp);

        // when & then
        assertEquals(message1, message2);
        assertEquals(message1.hashCode(), message2.hashCode());
    }

    @Test
    void shouldNotBeEqualWhenMessageIdsAreDifferent() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        Instant timestamp = Instant.now();

        EventMessage message1 = new EventMessage("msg-1", sessionId, feedMessage, "source", timestamp);
        EventMessage message2 = new EventMessage("msg-2", sessionId, feedMessage, "source", timestamp);

        // when & then
        assertNotEquals(message1, message2);
    }

    @Test
    void shouldBeEqualToItself() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        EventMessage message = new EventMessage(sessionId, feedMessage, "source");

        // when & then
        assertEquals(message, message);
    }

    @Test
    void shouldNotBeEqualToNull() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        EventMessage message = new EventMessage(sessionId, feedMessage, "source");

        // when & then
        assertNotEquals(null, message);
    }

    @Test
    void shouldNotBeEqualToDifferentClass() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        EventMessage message = new EventMessage(sessionId, feedMessage, "source");
        String differentClass = "not a message";

        // when & then
        assertNotEquals(differentClass, message);
    }

    @Test
    void shouldHaveValidToString() {
        // given
        SessionId sessionId = SessionId.of("test-session-123");
        FeedMessage feedMessage = createTestFeedMessage(123456789);
        EventMessage message = new EventMessage(sessionId, feedMessage, "kafka-topic");

        // when
        String result = message.toString();

        // then
        assertNotNull(result);
        assertTrue(result.contains("EventMessage{"));
        assertTrue(result.contains("messageId="));
        assertTrue(result.contains("targetSessionId="));
        assertTrue(result.contains("source="));
        assertTrue(result.contains("timestamp="));
        assertTrue(result.contains("kafka-topic"));
    }

    @Test
    void shouldConvertFeedMessageToDataString() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);

        // when
        EventMessage message = new EventMessage(sessionId, feedMessage, "source");

        // then
        assertNotNull(message);
        assertNotNull(message.getData());
        assertTrue(message.getData().contains("account_id: 123456789"));
    }

    @Test
    void shouldPreserveFeedMessageInEventMessage() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(987654321);

        // when
        EventMessage message = new EventMessage(sessionId, feedMessage, "kafka-topic");

        // then
        assertNotNull(message);
        assertEquals(feedMessage, message.getFeedMessage());
        assertEquals(987654321, message.getFeedMessage().getLoginPayload().getAccountId());
    }

    @Test
    void shouldPreserveAllFieldsFromConstructor() {
        // given
        String messageId = "custom-msg-id";
        SessionId sessionId = SessionId.of("session-456");
        FeedMessage feedMessage = createTestFeedMessage(555666777);
        String source = "customer-events";
        Instant timestamp = Instant.parse("2025-10-01T18:45:00Z");

        // when
        EventMessage message = new EventMessage(messageId, sessionId, feedMessage, source, timestamp);

        // then
        assertEquals(messageId, message.getMessageId());
        assertEquals(sessionId, message.getTargetSessionId());
        assertNotNull(message.getData());
        assertEquals(feedMessage, message.getFeedMessage());
        assertEquals(source, message.getSource());
        assertEquals(timestamp, message.getTimestamp());
    }

    @Test
    void shouldHandleDifferentAccountIdsInFeedMessage() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage1 = createTestFeedMessage(111111111);
        FeedMessage feedMessage2 = createTestFeedMessage(999999999);

        // when
        EventMessage message1 = new EventMessage(sessionId, feedMessage1, "source");
        EventMessage message2 = new EventMessage(sessionId, feedMessage2, "source");

        // then
        assertNotNull(message1);
        assertNotNull(message2);
        assertEquals(111111111, message1.getFeedMessage().getLoginPayload().getAccountId());
        assertEquals(999999999, message2.getFeedMessage().getLoginPayload().getAccountId());
    }

    @Test
    void shouldAccessFeedMessageHeader() {
        // given
        SessionId sessionId = SessionId.generate();
        FeedMessage feedMessage = createTestFeedMessage(123456789);

        // when
        EventMessage message = new EventMessage(sessionId, feedMessage, "source");

        // then
        assertNotNull(message.getFeedMessage().getHeader());
        assertEquals(Header.MessageType.Login, message.getFeedMessage().getHeader().getMessageType());
        assertNotNull(message.getFeedMessage().getHeader().getTimestamp());
    }
}
